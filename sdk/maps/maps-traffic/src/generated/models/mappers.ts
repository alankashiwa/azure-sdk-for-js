/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const TrafficFlowSegmentData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficFlowSegmentData",
    modelProperties: {
      flowSegmentData: {
        serializedName: "flowSegmentData",
        type: {
          name: "Composite",
          className: "TrafficFlowSegmentDataFlowSegmentData"
        }
      }
    }
  }
};

export const TrafficFlowSegmentDataFlowSegmentData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficFlowSegmentDataFlowSegmentData",
    modelProperties: {
      functionalRoadClass: {
        serializedName: "frc",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentSpeed: {
        serializedName: "currentSpeed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      freeFlowSpeed: {
        serializedName: "freeFlowSpeed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currentTravelTime: {
        serializedName: "currentTravelTime",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      freeFlowTravelTime: {
        serializedName: "freeFlowTravelTime",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      confidence: {
        serializedName: "confidence",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      coordinates: {
        serializedName: "coordinates",
        type: {
          name: "Composite",
          className: "TrafficFlowSegmentDataFlowSegmentDataCoordinates"
        }
      },
      version: {
        serializedName: "@version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      openLrCode: {
        serializedName: "openlr",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrafficFlowSegmentDataFlowSegmentDataCoordinates: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficFlowSegmentDataFlowSegmentDataCoordinates",
    modelProperties: {
      coordinates: {
        serializedName: "coordinate",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LatLongPair"
            }
          }
        }
      }
    }
  }
};

export const LatLongPair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LatLongPair",
    modelProperties: {
      latitude: {
        serializedName: "latitude",
        type: {
          name: "Number"
        }
      },
      longitude: {
        serializedName: "longitude",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TrafficIncidentDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficIncidentDetail",
    modelProperties: {
      tm: {
        serializedName: "tm",
        type: {
          name: "Composite",
          className: "TrafficIncidentDetailTm"
        }
      }
    }
  }
};

export const TrafficIncidentDetailTm: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficIncidentDetailTm",
    modelProperties: {
      id: {
        serializedName: "@id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pointsOfInterest: {
        serializedName: "poi",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrafficIncidentPointOfInterest"
            }
          }
        }
      }
    }
  }
};

export const TrafficIncidentPointOfInterest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficIncidentPointOfInterest",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      point: {
        serializedName: "p",
        type: {
          name: "Composite",
          className: "Point"
        }
      },
      iconCategory: {
        serializedName: "ic",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      magnitudeOfDelay: {
        serializedName: "ty",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bottomLeftCoordinate: {
        serializedName: "cbl",
        type: {
          name: "Composite",
          className: "Point"
        }
      },
      topLeftCoordinate: {
        serializedName: "ctr",
        type: {
          name: "Composite",
          className: "Point"
        }
      },
      clusterSize: {
        serializedName: "cs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lengthInMeters: {
        serializedName: "l",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      roadNumbers: {
        serializedName: "r",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startDate: {
        serializedName: "sd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        serializedName: "ed",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      delayInSeconds: {
        serializedName: "dl",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      trafficEndLocation: {
        serializedName: "t",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trafficStartLocation: {
        serializedName: "f",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "d",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cause: {
        serializedName: "c",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Point: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Point",
    modelProperties: {
      x: {
        serializedName: "x",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      y: {
        serializedName: "y",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TrafficIncidentViewport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficIncidentViewport",
    modelProperties: {
      viewpResp: {
        serializedName: "viewpResp",
        type: {
          name: "Composite",
          className: "TrafficIncidentViewportViewpResp"
        }
      }
    }
  }
};

export const TrafficIncidentViewportViewpResp: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficIncidentViewportViewpResp",
    modelProperties: {
      trafficState: {
        serializedName: "trafficState",
        type: {
          name: "Composite",
          className: "TrafficState"
        }
      },
      copyrightInformation: {
        serializedName: "copyrightIds",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "@version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maps: {
        serializedName: "@maps",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrafficState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficState",
    modelProperties: {
      trafficAge: {
        serializedName: "@trafficAge",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      trafficModelId: {
        serializedName: "@trafficModelId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrafficGetTrafficFlowTileHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficGetTrafficFlowTileHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrafficGetTrafficIncidentTileHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrafficGetTrafficIncidentTileHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

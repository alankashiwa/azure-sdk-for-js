/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { TimezoneClientContext } from "./timezoneClientContext";
import {
  TimezoneClientOptionalParams,
  JsonFormat,
  TimezoneClientGetTimezoneByIDOptionalParams,
  TimezoneClientGetTimezoneByIDResponse,
  TimezoneClientGetTimezoneByCoordinatesOptionalParams,
  TimezoneClientGetTimezoneByCoordinatesResponse,
  TimezoneClientGetWindowsTimezoneIdsOptionalParams,
  TimezoneClientGetWindowsTimezoneIdsResponse,
  TimezoneClientGetIanaTimezoneIdsOptionalParams,
  TimezoneClientGetIanaTimezoneIdsResponse,
  TimezoneClientGetIanaVersionOptionalParams,
  TimezoneClientGetIanaVersionResponse,
  TimezoneClientConvertWindowsTimezoneToIanaOptionalParams,
  TimezoneClientConvertWindowsTimezoneToIanaResponse
} from "./models";

export class TimezoneClient extends TimezoneClientContext {
  /**
   * Initializes a new instance of the TimezoneClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param options The parameter options
   */
  constructor(credentials: coreAuth.TokenCredential, options?: TimezoneClientOptionalParams) {
    super(credentials, options);
  }

  /**
   * __Time Zone by Id__
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   *
   * This API returns current, historical, and future time zone information for the specified IANA time
   * zone ID.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param timezoneId The IANA time zone ID.
   * @param options The options parameters.
   */
  getTimezoneByID(
    format: JsonFormat,
    timezoneId: string,
    options?: TimezoneClientGetTimezoneByIDOptionalParams
  ): Promise<TimezoneClientGetTimezoneByIDResponse> {
    return this.sendOperationRequest({ format, timezoneId, options }, getTimezoneByIDOperationSpec);
  }

  /**
   * __Time Zone by Coordinates__
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   *
   * This API returns current, historical, and future time zone information for a specified
   * latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given
   * location.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param coordinates Coordinates of the point for which time zone information is requested. This
   *                    parameter is a list of coordinates, containing a pair of coordinate(lat, long). When this endpoint
   *                    is called directly, coordinates are passed in as a single string containing coordinates, separated
   *                    by commas.
   * @param options The options parameters.
   */
  getTimezoneByCoordinates(
    format: JsonFormat,
    coordinates: number[],
    options?: TimezoneClientGetTimezoneByCoordinatesOptionalParams
  ): Promise<TimezoneClientGetTimezoneByCoordinatesResponse> {
    return this.sendOperationRequest(
      { format, coordinates, options },
      getTimezoneByCoordinatesOperationSpec
    );
  }

  /**
   * __Windows Time Zones__
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   *
   * This API returns a full list of Windows Time Zone IDs.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param options The options parameters.
   */
  getWindowsTimezoneIds(
    format: JsonFormat,
    options?: TimezoneClientGetWindowsTimezoneIdsOptionalParams
  ): Promise<TimezoneClientGetWindowsTimezoneIdsResponse> {
    return this.sendOperationRequest({ format, options }, getWindowsTimezoneIdsOperationSpec);
  }

  /**
   * __IANA Time Zones__
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   *
   * This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in
   * the system within one day.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param options The options parameters.
   */
  getIanaTimezoneIds(
    format: JsonFormat,
    options?: TimezoneClientGetIanaTimezoneIdsOptionalParams
  ): Promise<TimezoneClientGetIanaTimezoneIdsResponse> {
    return this.sendOperationRequest({ format, options }, getIanaTimezoneIdsOperationSpec);
  }

  /**
   * __Time Zone IANA Version__
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   *
   * This API returns the current IANA version number as Metadata.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param options The options parameters.
   */
  getIanaVersion(
    format: JsonFormat,
    options?: TimezoneClientGetIanaVersionOptionalParams
  ): Promise<TimezoneClientGetIanaVersionResponse> {
    return this.sendOperationRequest({ format, options }, getIanaVersionOperationSpec);
  }

  /**
   * __Windows to IANA Time Zone__
   *
   *
   * **Applies to**: S0 and S1 pricing tiers.
   *
   *
   * This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may
   * be returned for a single Windows ID. It is possible to narrow these results by adding an optional
   * territory parameter.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param windowsTimezoneId The Windows time zone ID.
   * @param options The options parameters.
   */
  convertWindowsTimezoneToIana(
    format: JsonFormat,
    windowsTimezoneId: string,
    options?: TimezoneClientConvertWindowsTimezoneToIanaOptionalParams
  ): Promise<TimezoneClientConvertWindowsTimezoneToIanaResponse> {
    return this.sendOperationRequest(
      { format, windowsTimezoneId, options },
      convertWindowsTimezoneToIanaOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getTimezoneByIDOperationSpec: coreClient.OperationSpec = {
  path: "/timezone/byId/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TimezoneResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.options,
    Parameters.timeStamp,
    Parameters.daylightSavingsTimeFrom,
    Parameters.daylightSavingsTimeLastingYears,
    Parameters.timezoneId
  ],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.clientId, Parameters.acceptLanguage],
  serializer
};
const getTimezoneByCoordinatesOperationSpec: coreClient.OperationSpec = {
  path: "/timezone/byCoordinates/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TimezoneResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.options,
    Parameters.timeStamp,
    Parameters.daylightSavingsTimeFrom,
    Parameters.daylightSavingsTimeLastingYears,
    Parameters.coordinates
  ],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.clientId, Parameters.acceptLanguage],
  serializer
};
const getWindowsTimezoneIdsOperationSpec: coreClient.OperationSpec = {
  path: "/timezone/enumWindows/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TimezoneWindows" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const getIanaTimezoneIdsOperationSpec: coreClient.OperationSpec = {
  path: "/timezone/enumIana/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IanaId" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const getIanaVersionOperationSpec: coreClient.OperationSpec = {
  path: "/timezone/ianaVersion/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TimezoneIanaVersionResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};
const convertWindowsTimezoneToIanaOperationSpec: coreClient.OperationSpec = {
  path: "/timezone/windowsToIana/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "IanaId" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.windowsTimezoneId,
    Parameters.windowsTerritoryCode
  ],
  urlParameters: [Parameters.$host, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.clientId],
  serializer
};

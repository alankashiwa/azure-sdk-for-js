/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** This object is returned from a successful Timezone By ID call or By Coordinates call */
export interface TimezoneResult {
  /**
   * Version property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Reference Utc Timestamp property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly referenceUtcTimestamp?: Date;
  /**
   * TimeZoneId array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeZones?: TimezoneId[];
}

export interface TimezoneId {
  /**
   * Id property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * An array of time zone ID aliases.â€¯ Only returned when [options]=*zoneinfo* or *all*.
   *
   * Note: may be null.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aliases?: string[];
  /**
   * An array of country records. Only returned when [options]=*zoneinfo* or *all*.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly countries?: CountryRecord[];
  /** Timezone names object. */
  names?: TimezoneNames;
  /**
   * Details in effect at the local time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly referenceTime?: ReferenceTime;
  /**
   * Representative point property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly representativePoint?: RepresentativePoint;
  /**
   * Time zone DST transitions from [transitionsFrom] until timestamp + 1 year.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeTransitions?: TimeTransition[];
}

/** A country record. */
export interface CountryRecord {
  /**
   * Country Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * ISO-3166 2-letter country code for the country.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
}

/** Timezone names object. */
export interface TimezoneNames {
  /**
   * The ISO 639-1 language code of the Names
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iSO6391LanguageCode?: string;
  /**
   * Generic Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly generic?: string;
  /**
   * Standard Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly standard?: string;
  /**
   * Daylight Name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly daylight?: string;
}

/** Details in effect at the local time. */
export interface ReferenceTime {
  /**
   * Time zone name in effect at the reference timestamp (i.e. PST or PDT depending whether Daylight Savings Time is in effect).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tag?: string;
  /**
   * UTC offset in effect at the `ReferenceUTCTimestamp`.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly standardOffset?: string;
  /**
   * Time saving in minutes in effect at the `ReferenceUTCTimestamp`.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly daylightSavings?: string;
  /**
   * Current wall time at the given time zone as shown in the `Tag` property.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly wallTime?: string;
  /**
   * The year this POSIX string is valid for. Note: A POSIX string will only be valid in the given year.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly posixTzValidYear?: number;
  /**
   * POSIX string used to set the time zone environment variable.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly posixTz?: string;
  /**
   * Sunrise at the given time zone as shown in the `Tag` property. The sunrise is described in the ISO8601 format. (Only be populated if the call is byCoordinates)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sunrise?: Date;
  /**
   * Sunset at the given time zone as shown in the `Tag` property. The sunset is described in the ISO8601 format.(Only be populated if the call is byCoordinates)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sunset?: Date;
}

/** Representative point property */
export interface RepresentativePoint {
  /**
   * Latitude property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly latitude?: number;
  /**
   * Longitude property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly longitude?: number;
}

export interface TimeTransition {
  /**
   * Tag property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tag?: string;
  /**
   * StandardOffset property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly standardOffset?: string;
  /**
   * DaylightSavings property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly daylightSavings?: string;
  /**
   * Start date, start time for this transition period
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly utcStart?: Date;
  /**
   * End date, end time for this transition period
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly utcEnd?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

export interface TimezoneWindows {
  /**
   * Windows Id property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly windowsId?: string;
  /**
   * Territory property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly territory?: string;
  /** IanaIds array */
  ianaIds?: string[];
}

export interface IanaId {
  /**
   * Id property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * IsAlias property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isAlias?: boolean;
  /**
   * AliasOf property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aliasOf?: string;
  /**
   * This attribute returns `True` if the IanaId has any country/zone associated with it.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasZone1970Location?: boolean;
}

/** This object is returned from a successful Timezone IANA Version call */
export interface TimezoneIanaVersionResult {
  /**
   * Version property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
}

/** Known values of {@link TimezoneOptions} that the service accepts. */
export enum KnownTimezoneOptions {
  /** Do not include zoneinfo or transitions in the result. */
  None = "none",
  /** Include additional time zone info in the result. */
  ZoneInfo = "zoneInfo",
  /** Include transition information in the result (The number of transitions is currently capped at 250). */
  Transitions = "transitions",
  /** Include both zoneinfo and transitions in the result. */
  All = "all"
}

/**
 * Defines values for TimezoneOptions. \
 * {@link KnownTimezoneOptions} can be used interchangeably with TimezoneOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none**: Do not include zoneinfo or transitions in the result. \
 * **zoneInfo**: Include additional time zone info in the result. \
 * **transitions**: Include transition information in the result (The number of transitions is currently capped at 250). \
 * **all**: Include both zoneinfo and transitions in the result.
 */
export type TimezoneOptions = string;

/** Known values of {@link JsonFormat} that the service accepts. */
export enum KnownJsonFormat {
  /** [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259) */
  Json = "json"
}

/**
 * Defines values for JsonFormat. \
 * {@link KnownJsonFormat} can be used interchangeably with JsonFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **json**: [The JavaScript Object Notation Data Interchange Format](https:\/\/tools.ietf.org\/html\/rfc8259)
 */
export type JsonFormat = string;

/** Optional parameters. */
export interface GeneratedClientGetTimezoneByIDOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in "EN". Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. */
  acceptLanguage?: string;
  /** Alternatively, use alias "o". Options available for types of information returned in the result. */
  options?: TimezoneOptions;
  /** Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the machine time serving the request. */
  timeStamp?: Date;
  /** Alternatively, use alias "tf". The start date from which daylight savings time (DST) transitions are requested, only applies when "options" = all or "options" = transitions. */
  daylightSavingsTimeFrom?: Date;
  /** Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST transitions are requested, only applies when "options" = all or "options" = transitions. */
  daylightSavingsTimeLastingYears?: number;
}

/** Contains response data for the getTimezoneByID operation. */
export type GeneratedClientGetTimezoneByIDResponse = TimezoneResult;

/** Optional parameters. */
export interface GeneratedClientGetTimezoneByCoordinatesOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in "EN". Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. */
  acceptLanguage?: string;
  /** Alternatively, use alias "o". Options available for types of information returned in the result. */
  options?: TimezoneOptions;
  /** Alternatively, use alias "stamp", or "s". Reference time, if omitted, the API will use the machine time serving the request. */
  timeStamp?: Date;
  /** Alternatively, use alias "tf". The start date from which daylight savings time (DST) transitions are requested, only applies when "options" = all or "options" = transitions. */
  daylightSavingsTimeFrom?: Date;
  /** Alternatively, use alias "ty". The number of years from "transitionsFrom" for which DST transitions are requested, only applies when "options" = all or "options" = transitions. */
  daylightSavingsTimeLastingYears?: number;
}

/** Contains response data for the getTimezoneByCoordinates operation. */
export type GeneratedClientGetTimezoneByCoordinatesResponse = TimezoneResult;

/** Optional parameters. */
export interface GeneratedClientGetWindowsTimezoneIdsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getWindowsTimezoneIds operation. */
export type GeneratedClientGetWindowsTimezoneIdsResponse = TimezoneWindows[];

/** Optional parameters. */
export interface GeneratedClientGetIanaTimezoneIdsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getIanaTimezoneIds operation. */
export type GeneratedClientGetIanaTimezoneIdsResponse = IanaId[];

/** Optional parameters. */
export interface GeneratedClientGetIanaVersionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getIanaVersion operation. */
export type GeneratedClientGetIanaVersionResponse = TimezoneIanaVersionResult;

/** Optional parameters. */
export interface GeneratedClientConvertWindowsTimezoneToIanaOptionalParams
  extends coreClient.OperationOptions {
  /** Windows Time Zone territory code. */
  windowsTerritoryCode?: string;
}

/** Contains response data for the convertWindowsTimezoneToIana operation. */
export type GeneratedClientConvertWindowsTimezoneToIanaResponse = IanaId[];

/** Optional parameters. */
export interface GeneratedClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. */
  clientId?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}

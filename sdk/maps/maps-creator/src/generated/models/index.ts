/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type StyleRuleUnion =
  | StyleRule
  | BooleanStyleRule
  | NumberStyleRule
  | StringStyleRule;
export type GeoJsonObjectUnion =
  | GeoJsonObject
  | GeoJsonGeometryUnion
  | GeoJsonFeature
  | GeoJsonFeatureCollection;
export type GeoJsonGeometryUnion =
  | GeoJsonGeometry
  | GeoJsonPoint
  | GeoJsonMultiPoint
  | GeoJsonLineString
  | GeoJsonMultiLineString
  | GeoJsonPolygon
  | GeoJsonMultiPolygon
  | GeoJsonGeometryCollection;

/** Detailed information for the alias. */
export interface Alias {
  /**
   * The created timestamp for the alias.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTimestamp?: Date;
  /**
   * The id for the alias.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aliasId?: string;
  /**
   * The id for the creator data item that this alias references (could be null if the alias has not been assigned).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creatorDataItemId?: string;
  /**
   * The timestamp of the last time the alias was assigned.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedTimestamp?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The response model for the List API. Returns a list of all the previously created aliases. */
export interface AliasListResult {
  /**
   * A list of all the previously created aliases.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aliases?: Alias[];
  /**
   * If present, the location of the next page of data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The response model for a Long-Running Operations API. */
export interface LongRunningOperationResult {
  /** The Id for this long-running operation. */
  operationId?: string;
  /**
   * The status state of the request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: LroStatus;
  /**
   * The created timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
  /** The error detail. */
  error?: ErrorDetail;
  /** The error detail. */
  warning?: ErrorDetail;
}

/** The response model for the Data List API. Returns a list of all the previously uploaded data. */
export interface MapDataListResult {
  /**
   * A list of all the previously uploaded data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mapDataList?: MapData[];
}

/** Detail information for the data. */
export interface MapData {
  /**
   * The unique data id for the data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly udid?: string;
  /**
   * The location of the data. Execute a HTTP `GET` on this location to download the data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locationURL?: string;
  /**
   * The size of the content in bytes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sizeInBytes?: number;
  /**
   * The current upload status of the content.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uploadStatus?: UploadStatus;
  dataFormat?: DataFormat;
  /**
   * The current description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The response model for the Dataset List API. The response body will contain a list of all the previously created datasets. */
export interface DatasetListResult {
  /**
   * A list of all the previously created datasets.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly datasets?: Dataset[];
  /**
   * If present, the location of the next page of data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Detail information for the dataset. */
export interface Dataset {
  /**
   * The created timestamp for the dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
  /**
   * The id for the dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly datasetId?: string;
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /**
   * The description for the dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /** Information about the details of the create request for the dataset. */
  datasetSources?: DatasetSources;
  /**
   * The feature counts for the dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly featureCounts?: Record<string, unknown>;
}

/** Information about the details of the create request for the dataset. */
export interface DatasetSources {
  /**
   * The list of `conversionId` that were used to create the dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly conversionIds?: string[];
  /**
   * The dataset that was appended to to create the current dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appendDatasetId?: string;
}

/** The response model for the Conversion List API. */
export interface ConversionListResult {
  /**
   * A list of all the previously submitted conversion requests.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly conversions?: Conversion[];
  /**
   * If present, the location of the next page of data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Detail information for the conversion requests. */
export interface Conversion {
  /**
   * A unique id that represents the artifact of a _successfully_ completed conversion process.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly conversionId?: string;
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /**
   * The unique id of the content provided to create this conversion.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly udid?: string;
  /**
   * The date and time of this conversion.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: string;
  /**
   * User provided description of the content being converted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * A summary of feature counts in this conversion.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly featureCounts?: { [propertyName: string]: number };
}

/** The styles model. */
export interface StyleRules {
  /** An array of stateset style rules. The style rule could be a numeric or string or a boolean type style rule.  Refer to NumberRule, StringRule and BooleanRule definitions [here](https://aka.ms/AzureMapsStatesetStyles). */
  styleRules?: StyleRuleUnion[];
}

/** The stateset style model. The style rule could be a numeric type style rule or a boolean type style rule.  Refer to NumberRule, StringRuleObject and BooleanRule definitions [here](https://aka.ms/AzureMapsStatesetStyles). */
export interface StyleRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "boolean" | "number" | "string";
  /** Stateset style key name. Key names are random strings but they should be unique inside style array. */
  keyName: string;
}

/** The response model for the successful Stateset Create API. */
export interface StatesetCreatedResult {
  /**
   * The ID for the new stateset created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statesetId?: string;
}

/** The response model for the successful Stateset List API. */
export interface StatesetListResult {
  /** A list of statesets information. */
  statesets?: StatesetInfo[];
  /**
   * If present, the location of the next page of data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The response model for the successful Stateset Get API. */
export interface Stateset {
  /**
   * Description associated with the stateset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /** Dataset ID associated with the stateset. */
  datasetIds?: string[];
  /** The styles model. */
  styleRules?: StyleRules;
}

/** The feature states model for a feature. */
export interface FeatureStatesStructure {
  /** The feature states array. */
  states?: FeatureState[];
}

/** Single feature state model. */
export interface FeatureState {
  /** Feature state Keyname. Maximum length allowed is 1000. */
  keyName?: string;
  /** Value for the feature state. Type should comply with the style definition attached to the featurestate. Maximum length allowed for string type is 1024. */
  value?: string;
  /** Valid Timestamp when the feature state was captured. */
  eventTimestamp?: string;
}

/** This object is returned from a geofence proximity call. */
export interface Geofence {
  /**
   * Lists the fence geometries that contain the coordinate position or overlap the searchBuffer around the position.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geometries?: GeofenceGeometry[];
  /**
   * Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expiredGeofenceGeometryId?: string[];
  /**
   * Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly invalidPeriodGeofenceGeometryId?: string[];
  /**
   * True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber. This will only be presented in response when 'isAsync' query parameter is set to true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isEventPublished?: boolean;
}

/** The geofencing geometry. */
export interface GeofenceGeometry {
  /**
   * ID of the device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deviceId?: string;
  /**
   * The unique id returned from [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid GeoJSON FeatureCollection object. Please refer to  [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature's properties should  contain `geometryId`, which is used for identifying the geometry and is case-sensitive.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly udid?: string;
  /**
   * The unique id identifies a geometry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geometryId?: string;
  /**
   * Distance from the coordinate to the closest border of the geofence (in meters except when special values -999/999 are used). Positive means the  coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border, then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly distance?: number;
  /**
   * Latitude of the nearest point of the geometry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nearestLat?: number;
  /**
   * Longitude of the nearest point of the geometry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nearestLon?: number;
  /**
   * Sea level in meter of the nearest point on the 2D extrusion geometry. This will only be presented in response when value is provided for 'zInMeter' in the request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nearestElevation?: number;
}

/** An object with a FeatureCollection and a list of distances.  All the feature's properties should contain `geometryId`, which is used for identifying the geometry and is case-sensitive. */
export interface BufferRequestBody {
  /** A valid `GeoJSON FeatureCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. */
  geometries?: Record<string, unknown>;
  /** List of the distances to compute the buffer for, one-to-one per Feature in the collection, or one for all Features in the collection. */
  distances?: number[];
}

/** This object is returned from a successful Spatial Buffer call. */
export interface BufferResult {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly summary?: BufferSummary;
  /** The FeatureCollection of buffers for the input. */
  features?: GeoJsonFeatureCollection;
}

export interface BufferSummary {
  /**
   * The udid for the user data if one exists
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly udid?: string;
  /**
   * The information about what happened during the call.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly information?: string;
}

/** A valid `GeoJSON` object. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3) for details. */
export interface GeoJsonObject {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "GeoJsonGeometry"
    | "Feature"
    | "FeatureCollection"
    | "Point"
    | "MultiPoint"
    | "LineString"
    | "MultiLineString"
    | "Polygon"
    | "MultiPolygon"
    | "GeometryCollection";
}

export interface GeoJsonFeatureCollectionData {
  /** Contains a list of valid `GeoJSON Feature` objects. */
  features: GeoJsonFeature[];
}

export interface GeoJsonFeatureData {
  /** A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details. */
  geometry: GeoJsonGeometryUnion;
  /** Properties can contain any additional metadata about the `Feature`. Value can be any JSON object or a JSON null value */
  properties?: Record<string, unknown>;
  /** Identifier for the feature. */
  id?: string;
  /** The type of the feature. The value depends on the data model the current feature is part of. Some data models may have an empty value. */
  featureType?: string;
}

/** This object is returned from a successful Spatial Closest Point call */
export interface ClosestPointResponse {
  /**
   * Closest Point Summary object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: ClosestPointSummary;
  /** Closest Point Result Array */
  result?: ClosestPoint[];
}

/** Closest Point Summary object */
export interface ClosestPointSummary {
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  sourcePoint?: LatLongPairAbbreviated;
  /**
   * A unique data id (udid) for the uploaded content
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly udid?: string;
  /**
   * Processing information
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly information?: string;
}

/** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
export interface LatLongPairAbbreviated {
  /** Latitude property */
  lat?: number;
  /** Longitude property */
  lon?: number;
}

/** Closest Point Result Entry Object */
export interface ClosestPoint {
  /**
   * The distance in meters from the source point to the closest point
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly distanceInMeters?: number;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  position?: LatLongPairAbbreviated;
  /**
   * The unique id identifies a geometry
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly geometryId?: string;
}

/** Returns true if point is within the polygon, false otherwise */
export interface PointInPolygonResult {
  /**
   * Point In Polygon Summary object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: PointInPolygonSummary;
  /** Point In Polygon Result Object */
  result?: PointInPolygonResultResult;
}

/** Point In Polygon Summary object */
export interface PointInPolygonSummary {
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  sourcePoint?: LatLongPairAbbreviated;
  /**
   * A unique data id (udid) for the uploaded content. Udid is not applicable for POST spatial operations(set to null)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly udid?: string;
  /**
   * Processing information
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly information?: string;
}

/** Point In Polygon Result Object */
export interface PointInPolygonResultResult {
  /**
   * Point In Polygons Property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isPointInPolygons?: boolean;
  /**
   * Geometries array
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly intersectingGeometries?: string[];
}

/** This object is returned from a successful Great Circle Distance call */
export interface GreatCircleDistanceResult {
  /**
   * Summary object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly summary?: GreatCircleDistanceSummary;
  /**
   * Result Object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly result?: GreatCircleDistanceResultResult;
}

/** Summary object */
export interface GreatCircleDistanceSummary {
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  sourcePoint?: LatLongPairAbbreviated;
  /** A location represented as a latitude and longitude using short names 'lat' & 'lon'. */
  targetPoint?: LatLongPairAbbreviated;
}

/** Result Object */
export interface GreatCircleDistanceResultResult {
  /**
   * The great circle distance in meters from the source point to the target point
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly distanceInMeters?: number;
}

/** The response model for the Tileset List API. Returns a list of all tilesets. */
export interface TilesetListResult {
  /**
   * A list of all tilesets.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tilesets?: Tileset[];
  /**
   * If present, the location of the next page of data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Detail information for the data. */
export interface Tileset {
  /**
   * The unique tileset id for the tileset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tilesetId?: string;
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /**
   * The unique dataset Id used to create the tileset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly datasetId?: string;
  /**
   * The description the caller provided when creating the tileset. Maximum length 1024 characters.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The lowest tile zoom level tile generated for the tileset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minZoom?: number;
  /**
   * The highest tile zoom level tile generated for the tileset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxZoom?: number;
  /**
   * Bounding box which all features of the tileset lay within. Projection used - EPSG:3857. Format : 'minLon, minLat, maxLon, maxLat'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bbox?: number[];
}

export interface LandingPageResult {
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /** Links to other WFS endpoints. */
  links: WFSEndpointLink[];
}

/** Links to other WFS endpoints */
export interface WFSEndpointLink {
  /** The link target. */
  href: string;
  /** The relation type. */
  rel?: string;
  /** A hint indicating what the media type of the result of dereferencing the link should be. */
  type?: string;
  /** A hint indicating what the language of the result of dereferencing the link should be. */
  hrefLang?: string;
  /** Used to label the destination of a link such that it can be used as a human-readable identifier (e.g., a menu entry) in the language indicated by the Content-Language header field (if present). */
  title?: string;
}

export interface ConformanceResult {
  /** List of requirements classes that the server conforms to. */
  conformsTo: string[];
}

export interface CollectionsResponse {
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /** Links to other WFS endpoints. */
  links: WFSEndpointLink[];
  /** All the collections in a given dataset. */
  collections: Collection[];
}

export interface Collection {
  /** identifier of the collection used, for example, in URIs */
  name: string;
  /** human readable title of the collection */
  title?: string;
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /** a description of the features in the collection */
  description?: string;
  /** Links to other WFS endpoints. */
  links: WFSEndpointLink[];
}

/** collection of GeoJSON features */
export interface CollectionDefinition {
  /** describes the collection */
  description?: string;
  /** prefix of the collection used */
  idPrefix: string;
  /** identifier of the collection used, for example, in URIs */
  name: string;
  /** title of collection */
  title?: string;
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /** type of geometry returned */
  geometryType: GeoJsonGeometryType;
  /** type of features returned */
  featureTypes: string[];
  /** attributes of the collection used */
  properties?: DefinitionProperty[];
  /** Links to other WFS endpoints. */
  links?: WFSEndpointLink[];
}

export interface DefinitionProperty {
  /** name of attribute */
  name: string;
  /** is attribute required */
  required: boolean;
  /** type of attribute */
  type: Record<string, unknown>;
}

export interface ExtendedGeoJsonFeatureCollectionData {
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /** Number of returned features. */
  numberReturned?: number;
  /** Links to other WFS endpoints. */
  links?: WFSEndpointLink[];
}

export interface FeatureResult {
  /**
   * The ontology version of this dataset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ontology?: string;
  /** A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details. */
  feature: GeoJsonFeature;
  /** Links to other WFS endpoints. */
  links?: WFSEndpointLink[];
}

/** The numeric rule. The color is selected from the first range it falls into. */
export interface NumberRule {
  /** The numeric value range for this style rule. If the value is in the range, all the conditions must hold true. */
  range?: Range;
  /** The color when value is within the range. Color is a JSON string in a variety of permitted formats, HTML-style hex values, RGB ("#ff0", "#ffff00", "rgb(255, 255, 0)"), RGBA ("rgba(255, 255, 0, 1)"), HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)"). Predefined HTML colors names, like yellow and blue, are also permitted. */
  color?: string;
}

/** The numeric value range for this style rule. If the value is in the range, all the conditions must hold true. */
export interface Range {
  /** All the number x that x ≥ minimum. */
  minimum?: string;
  /** All the number x that x ≤ maximum. */
  maximum?: string;
  /** All the number x that x > exclusiveMinimum. */
  exclusiveMinimum?: string;
  /** All the number x that x < exclusiveMaximum. */
  exclusiveMaximum?: string;
}

/** The boolean rule. The color is selected based on the logic value of the key. */
export interface BooleanRule {
  /** The color when value is true. Color is a JSON string in a variety of permitted formats, HTML-style hex values, RGB ("#ff0", "#ffff00", "rgb(255, 255, 0)"), RGBA ("rgba(255, 255, 0, 1)"), HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)"). Predefined HTML colors names, like yellow and blue, are also permitted. */
  true?: string;
  /** The color when value is false. Color is a JSON string in a variety of permitted formats, HTML-style hex values, RGB ("#ff0", "#ffff00", "rgb(255, 255, 0)"), RGBA ("rgba(255, 255, 0, 1)"), HSL("hsl(100, 50%, 50%)"), and HSLA("hsla(100, 50%, 50%, 1)"). Predefined HTML colors names, like yellow and blue, are also permitted. */
  false?: string;
}

/** Data contained by a `GeoJson Point`. */
export interface GeoJsonPointData {
  /** A `Position` is an array of numbers with two or more elements. The first two elements are _longitude_ and _latitude_, precisely in that order. _Altitude/Elevation_ is an optional third element. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.1) for details. */
  coordinates: number[];
}

/** Data contained by a `GeoJson MultiPoint`. */
export interface GeoJsonMultiPointData {
  /** Coordinates for the `GeoJson MultiPoint` geometry. */
  coordinates: number[][];
}

export interface GeoJsonLineStringData {
  /** Coordinates for the `GeoJson LineString` geometry. */
  coordinates: number[][];
}

export interface GeoJsonMultiLineStringData {
  /** Coordinates for the `GeoJson MultiLineString` geometry. */
  coordinates: number[][][];
}

export interface GeoJsonPolygonData {
  /** Coordinates for the `GeoJson Polygon` geometry type. */
  coordinates: number[][][];
}

export interface GeoJsonMultiPolygonData {
  /** Contains a list of valid `GeoJSON Polygon` objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). */
  coordinates: number[][][][];
}

export interface GeoJsonGeometryCollectionData {
  /** Contains a list of valid `GeoJSON` geometry objects. **Note** that coordinates in GeoJSON are in x, y order (longitude, latitude). */
  geometries: GeoJsonGeometryUnion[];
}

/** The boolean type style rule object. */
export type BooleanStyleRule = StyleRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "boolean";
  /** Boolean style rules. */
  rules: BooleanRule[];
};

/** The numeric type style rule object. */
export type NumberStyleRule = StyleRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "number";
  /** Numeric style rules. */
  rules: NumberRule[];
};

/** The string type style rule object. */
export type StringStyleRule = StyleRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "string";
  /** String style rules. */
  rules: { [propertyName: string]: string }[];
};

/** The stateset information detail. */
export type StatesetInfo = Stateset & {
  /**
   * The stateset ID of this stateset.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statesetId?: string;
};

/** A valid `GeoJSON` geometry object. The type must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1) for details. */
export type GeoJsonGeometry = GeoJsonObject & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "GeoJsonGeometry"
    | "Point"
    | "MultiPoint"
    | "LineString"
    | "MultiLineString"
    | "Polygon"
    | "MultiPolygon"
    | "GeometryCollection";
};

/** A valid `GeoJSON Feature` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.2) for details. */
export type GeoJsonFeature = GeoJsonObject &
  GeoJsonFeatureData & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Feature";
  };

/** A valid `GeoJSON FeatureCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. */
export type GeoJsonFeatureCollection = GeoJsonObject &
  GeoJsonFeatureCollectionData & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FeatureCollection";
  };

/** A valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. */
export type ExtendedGeoJsonFeatureCollection = GeoJsonFeatureCollectionData &
  ExtendedGeoJsonFeatureCollectionData & {
    /** Specifies the `GeoJSON` type: FeatureCollection. */
    type?: GeoJsonObjectType;
  };

/** A valid `GeoJSON Point` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.2) for details. */
export type GeoJsonPoint = GeoJsonGeometry & GeoJsonPointData & {};

/** A valid `GeoJSON MultiPoint` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.3) for details. */
export type GeoJsonMultiPoint = GeoJsonGeometry & GeoJsonMultiPointData & {};

/** A valid `GeoJSON LineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for details. */
export type GeoJsonLineString = GeoJsonGeometry & GeoJsonLineStringData & {};

/** A valid `GeoJSON MultiLineString` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.5) for details. */
export type GeoJsonMultiLineString = GeoJsonGeometry &
  GeoJsonMultiLineStringData & {};

/** A valid `GeoJSON Polygon` geometry type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.6) for details. */
export type GeoJsonPolygon = GeoJsonGeometry & GeoJsonPolygonData & {};

/** A valid `GeoJSON MultiPolygon` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.7) for details. */
export type GeoJsonMultiPolygon = GeoJsonGeometry &
  GeoJsonMultiPolygonData & {};

/** A valid `GeoJSON GeometryCollection` object type. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.1.8) for details. */
export type GeoJsonGeometryCollection = GeoJsonGeometry &
  GeoJsonGeometryCollectionData & {};

/** Defines headers for Alias_create operation. */
export interface AliasCreateHeaders {
  /** The list of response headers that can be read by the client. */
  accessControlExposeHeaders?: string;
}

/** Defines headers for Data_upload operation. */
export interface DataUploadHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Defines headers for Data_update operation. */
export interface DataUpdateHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Defines headers for Data_download operation. */
export interface DataDownloadHeaders {
  /** The content-type for the Download API response. */
  contentType?: string;
}

/** Defines headers for Data_getOperation operation. */
export interface DataGetOperationHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Defines headers for Dataset_create operation. */
export interface DatasetCreateHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Defines headers for Dataset_getOperation operation. */
export interface DatasetGetOperationHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Defines headers for Conversion_convert operation. */
export interface ConversionConvertHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Defines headers for Conversion_getOperation operation. */
export interface ConversionGetOperationHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Defines headers for Spatial_getGeofence operation. */
export interface SpatialGetGeofenceHeaders {
  /** Value present in an async call's response and the Event Grid event data. It helps correlate the async call’s response with the corresponding Event Grid event. */
  xCorrelationId?: string;
}

/** Defines headers for Spatial_postGeofence operation. */
export interface SpatialPostGeofenceHeaders {
  /** Value present in an async call's response and the Event Grid event data. It helps correlate the async call’s response with the corresponding Event Grid event. */
  xCorrelationId?: string;
}

/** Defines headers for Tileset_create operation. */
export interface TilesetCreateHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Defines headers for Tileset_getOperation operation. */
export interface TilesetGetOperationHeaders {
  /** If successful, a URI where details on the newly created resource can be found. */
  resourceLocation?: string;
}

/** Parameter group */
export interface Position {
  /** The latitude of the location being passed.  Example: 48.36. */
  latitude: number;
  /** The longitude of the location being passed.  Example: -124.63. */
  longitude: number;
}

/** Known values of {@link Geography} that the service accepts. */
export enum KnownGeography {
  Us = "us",
  Eu = "eu"
}

/**
 * Defines values for Geography. \
 * {@link KnownGeography} can be used interchangeably with Geography,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **us** \
 * **eu**
 */
export type Geography = string;

/** Known values of {@link DataFormat} that the service accepts. */
export enum KnownDataFormat {
  /** [GeoJSON](https://tools.ietf.org/html/rfc7946) is a JSON based geospatial data interchange format. */
  Geojson = "geojson",
  /** Compressed data format. */
  Zip = "zip",
  /** ZIP package containing DWG file. */
  DwgZipPackage = "dwgzippackage"
}

/**
 * Defines values for DataFormat. \
 * {@link KnownDataFormat} can be used interchangeably with DataFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **geojson**: [GeoJSON](https:\/\/tools.ietf.org\/html\/rfc7946) is a JSON based geospatial data interchange format. \
 * **zip**: Compressed data format. \
 * **dwgzippackage**: ZIP package containing DWG file.
 */
export type DataFormat = string;

/** Known values of {@link LroStatus} that the service accepts. */
export enum KnownLroStatus {
  /** The request has not started processing yet. */
  NotStarted = "NotStarted",
  /** The request has started processing. */
  Running = "Running",
  /** The request has one or more failures. */
  Failed = "Failed",
  /** The request has successfully completed. */
  Succeeded = "Succeeded"
}

/**
 * Defines values for LroStatus. \
 * {@link KnownLroStatus} can be used interchangeably with LroStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted**: The request has not started processing yet. \
 * **Running**: The request has started processing. \
 * **Failed**: The request has one or more failures. \
 * **Succeeded**: The request has successfully completed.
 */
export type LroStatus = string;

/** Known values of {@link OutputOntology} that the service accepts. */
export enum KnownOutputOntology {
  /** Facility ontology defines how Azure Maps Creator internally stores facility data in a Creator dataset. */
  Facility20 = "facility-2.0"
}

/**
 * Defines values for OutputOntology. \
 * {@link KnownOutputOntology} can be used interchangeably with OutputOntology,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **facility-2.0**: Facility ontology defines how Azure Maps Creator internally stores facility data in a Creator dataset.
 */
export type OutputOntology = string;

/** Known values of {@link StyleRuleType} that the service accepts. */
export enum KnownStyleRuleType {
  /** Boolean type of stateset style. */
  Boolean = "boolean",
  /** Number type of stateset style. */
  Number = "number",
  /** String type of stateset style. */
  String = "string"
}

/**
 * Defines values for StyleRuleType. \
 * {@link KnownStyleRuleType} can be used interchangeably with StyleRuleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **boolean**: Boolean type of stateset style. \
 * **number**: Number type of stateset style. \
 * **string**: String type of stateset style.
 */
export type StyleRuleType = string;

/** Known values of {@link JsonFormat} that the service accepts. */
export enum KnownJsonFormat {
  /** [The JavaScript Object Notation Data Interchange Format](https://tools.ietf.org/html/rfc8259) */
  Json = "json"
}

/**
 * Defines values for JsonFormat. \
 * {@link KnownJsonFormat} can be used interchangeably with JsonFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **json**: [The JavaScript Object Notation Data Interchange Format](https:\/\/tools.ietf.org\/html\/rfc8259)
 */
export type JsonFormat = string;

/** Known values of {@link GeofenceMode} that the service accepts. */
export enum KnownGeofenceMode {
  /** Publish all the query results to Azure Maps account event subscription. */
  All = "All",
  /** Only publish result when user location is considered as crossing geofencing boarder. */
  EnterAndExit = "EnterAndExit"
}

/**
 * Defines values for GeofenceMode. \
 * {@link KnownGeofenceMode} can be used interchangeably with GeofenceMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **All**: Publish all the query results to Azure Maps account event subscription. \
 * **EnterAndExit**: Only publish result when user location is considered as crossing geofencing boarder.
 */
export type GeofenceMode = string;

/** Known values of {@link GeoJsonGeometryType} that the service accepts. */
export enum KnownGeoJsonGeometryType {
  /** `GeoJSON Point` geometry. */
  GeoJsonPoint = "Point",
  /** `GeoJSON MultiPoint` geometry. */
  GeoJsonMultiPoint = "MultiPoint",
  /** `GeoJSON LineString` geometry. */
  GeoJsonLineString = "LineString",
  /** `GeoJSON MultiLineString` geometry. */
  GeoJsonMultiLineString = "MultiLineString",
  /** `GeoJSON Polygon` geometry. */
  GeoJsonPolygon = "Polygon",
  /** `GeoJSON MultiPolygon` geometry. */
  GeoJsonMultiPolygon = "MultiPolygon",
  /** `GeoJSON GeometryCollection` geometry. */
  GeoJsonGeometryCollection = "GeometryCollection"
}

/**
 * Defines values for GeoJsonGeometryType. \
 * {@link KnownGeoJsonGeometryType} can be used interchangeably with GeoJsonGeometryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Point**: `GeoJSON Point` geometry. \
 * **MultiPoint**: `GeoJSON MultiPoint` geometry. \
 * **LineString**: `GeoJSON LineString` geometry. \
 * **MultiLineString**: `GeoJSON MultiLineString` geometry. \
 * **Polygon**: `GeoJSON Polygon` geometry. \
 * **MultiPolygon**: `GeoJSON MultiPolygon` geometry. \
 * **GeometryCollection**: `GeoJSON GeometryCollection` geometry.
 */
export type GeoJsonGeometryType = string;

/** Known values of {@link GeographicResourceLocation} that the service accepts. */
export enum KnownGeographicResourceLocation {
  /** Used to access an Azure Maps Creator resource in the United States */
  Us = "us",
  /** Used to access an Azure Maps Creator resource in Europe */
  Eu = "eu"
}

/**
 * Defines values for GeographicResourceLocation. \
 * {@link KnownGeographicResourceLocation} can be used interchangeably with GeographicResourceLocation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **us**: Used to access an Azure Maps Creator resource in the United States \
 * **eu**: Used to access an Azure Maps Creator resource in Europe
 */
export type GeographicResourceLocation = string;
/** Defines values for UploadStatus. */
export type UploadStatus = "Pending" | "Completed" | "Failed";
/** Defines values for GeoJsonObjectType. */
export type GeoJsonObjectType =
  | "Point"
  | "MultiPoint"
  | "LineString"
  | "MultiLineString"
  | "Polygon"
  | "MultiPolygon"
  | "GeometryCollection"
  | "Feature"
  | "FeatureCollection";

/** Optional parameters. */
export interface AliasCreateOptionalParams extends coreClient.OperationOptions {
  /** The unique id that references a creator data item to be aliased. */
  creatorDataItemId?: string;
}

/** Contains response data for the create operation. */
export type AliasCreateResponse = AliasCreateHeaders & Alias;

/** Optional parameters. */
export interface AliasListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AliasListResponse = AliasListResult;

/** Optional parameters. */
export interface AliasAssignOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the assign operation. */
export type AliasAssignResponse = Alias;

/** Optional parameters. */
export interface AliasDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AliasGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AliasGetResponse = Alias;

/** Optional parameters. */
export interface AliasListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AliasListNextResponse = AliasListResult;

/** Optional parameters. */
export interface DataUpload$binaryOptionalParams
  extends coreClient.OperationOptions {
  /** The description to be given to the upload. */
  description?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DataUpload$jsonOptionalParams
  extends coreClient.OperationOptions {
  /** The description to be given to the upload. */
  description?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the upload operation. */
export type DataUploadResponse = DataUploadHeaders & LongRunningOperationResult;

/** Optional parameters. */
export interface DataListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DataListResponse = MapDataListResult;

/** Optional parameters. */
export interface DataUpdateOptionalParams extends coreClient.OperationOptions {
  /** The description to be given to the upload. */
  description?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DataUpdateResponse = DataUpdateHeaders & LongRunningOperationResult;

/** Optional parameters. */
export interface DataDownloadOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the download operation. */
export type DataDownloadResponse = DataDownloadHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Optional parameters. */
export interface DataDeleteOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface DataGetOperationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperation operation. */
export type DataGetOperationResponse = DataGetOperationHeaders &
  LongRunningOperationResult;

/** Optional parameters. */
export interface DatasetCreateOptionalParams
  extends coreClient.OperationOptions {
  /** The description to be given to the dataset. */
  description?: string;
  /** The ID for the dataset to append with. The dataset must originate from a previous dataset creation call that matches the datasetId */
  datasetId?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type DatasetCreateResponse = DatasetCreateHeaders &
  LongRunningOperationResult;

/** Optional parameters. */
export interface DatasetListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DatasetListResponse = DatasetListResult;

/** Optional parameters. */
export interface DatasetGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DatasetGetResponse = Dataset;

/** Optional parameters. */
export interface DatasetDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface DatasetGetOperationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperation operation. */
export type DatasetGetOperationResponse = DatasetGetOperationHeaders &
  LongRunningOperationResult;

/** Optional parameters. */
export interface DatasetListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DatasetListNextResponse = DatasetListResult;

/** Optional parameters. */
export interface ConversionConvertOptionalParams
  extends coreClient.OperationOptions {
  /** User provided description of the content being converted. */
  description?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the convert operation. */
export type ConversionConvertResponse = ConversionConvertHeaders &
  LongRunningOperationResult;

/** Optional parameters. */
export interface ConversionListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ConversionListResponse = ConversionListResult;

/** Optional parameters. */
export interface ConversionGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConversionGetResponse = Conversion;

/** Optional parameters. */
export interface ConversionDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ConversionGetOperationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperation operation. */
export type ConversionGetOperationResponse = ConversionGetOperationHeaders &
  LongRunningOperationResult;

/** Optional parameters. */
export interface ConversionListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ConversionListNextResponse = ConversionListResult;

/** Optional parameters. */
export interface FeatureStateCreateStatesetOptionalParams
  extends coreClient.OperationOptions {
  /** Description for the stateset. Max length allowed is 1000. */
  description?: string;
}

/** Contains response data for the createStateset operation. */
export type FeatureStateCreateStatesetResponse = StatesetCreatedResult;

/** Optional parameters. */
export interface FeatureStateListStatesetsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listStatesets operation. */
export type FeatureStateListStatesetsResponse = StatesetListResult;

/** Optional parameters. */
export interface FeatureStateUpdateStatesetOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FeatureStateDeleteStatesetOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FeatureStateGetStatesetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getStateset operation. */
export type FeatureStateGetStatesetResponse = Stateset;

/** Optional parameters. */
export interface FeatureStateUpdateStatesOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FeatureStateDeleteStateOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FeatureStateListStatesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listStates operation. */
export type FeatureStateListStatesResponse = FeatureStatesStructure;

/** Optional parameters. */
export interface FeatureStateListStatesetsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listStatesetsNext operation. */
export type FeatureStateListStatesetsNextResponse = StatesetListResult;

/** Optional parameters. */
export interface SpatialGetGeofenceOptionalParams
  extends coreClient.OperationOptions {
  /** The sea level in meter of the location being passed. If this parameter is presented, 2D extrusion is used. Example: 200. */
  altitude?: number;
  /** The user request time. If not presented in the request, the default value is DateTime.Now. */
  userTime?: Date;
  /** The radius of the buffer around the geofence in meters that defines how far to search inside and outside the border of the fence against the coordinate that was provided when calculating the result.  The minimum value is 0, and the maximum is 500.  The default value is 50. */
  searchBufferInMeters?: number;
  /** If true, the request will use async event mechanism; if false, the request will be synchronized and do not trigger any event. The default value is false. */
  isAsync?: boolean;
  /** Mode of the geofencing async event mechanism. */
  mode?: GeofenceMode;
}

/** Contains response data for the getGeofence operation. */
export type SpatialGetGeofenceResponse = SpatialGetGeofenceHeaders & Geofence;

/** Optional parameters. */
export interface SpatialPostGeofenceOptionalParams
  extends coreClient.OperationOptions {
  /** The sea level in meter of the location being passed. If this parameter is presented, 2D extrusion geofencing is applied. Example: 200. */
  altitude?: number;
  /** The user request time. If not presented in the request, the default value is DateTime.UtcNow. */
  userTime?: Date;
  /** If true, the request will use async event mechanism; if false, the request will be synchronized and do not trigger any event. The default value is false. */
  isAsync?: boolean;
  /** Mode of the geofencing async event mechanism. */
  mode?: GeofenceMode;
  /** The radius of the buffer around the geofence in meters that defines how far to search inside and outside the border of the fence against the coordinate that was provided when calculating the result.  The minimum value is 0, and the maximum is 500.  The default value is 50. */
  searchBuffer?: number;
}

/** Contains response data for the postGeofence operation. */
export type SpatialPostGeofenceResponse = SpatialPostGeofenceHeaders & Geofence;

/** Optional parameters. */
export interface SpatialPostBufferOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the postBuffer operation. */
export type SpatialPostBufferResponse = BufferResult;

/** Optional parameters. */
export interface SpatialGetBufferOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuffer operation. */
export type SpatialGetBufferResponse = BufferResult;

/** Optional parameters. */
export interface SpatialPostClosestPointOptionalParams
  extends coreClient.OperationOptions {
  /** The number of closest points expected from response. Default: 1, minimum: 1 and maximum: 50 */
  numberOfClosestPoints?: number;
}

/** Contains response data for the postClosestPoint operation. */
export type SpatialPostClosestPointResponse = ClosestPointResponse;

/** Optional parameters. */
export interface SpatialGetClosestPointOptionalParams
  extends coreClient.OperationOptions {
  /** The number of closest points expected from response. Default: 1, minimum: 1 and maximum: 50 */
  numberOfClosestPoints?: number;
}

/** Contains response data for the getClosestPoint operation. */
export type SpatialGetClosestPointResponse = ClosestPointResponse;

/** Optional parameters. */
export interface SpatialPostPointInPolygonOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the postPointInPolygon operation. */
export type SpatialPostPointInPolygonResponse = PointInPolygonResult;

/** Optional parameters. */
export interface SpatialEvaluatePointInPolygonOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the evaluatePointInPolygon operation. */
export type SpatialEvaluatePointInPolygonResponse = PointInPolygonResult;

/** Optional parameters. */
export interface SpatialGetGreatCircleDistanceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getGreatCircleDistance operation. */
export type SpatialGetGreatCircleDistanceResponse = GreatCircleDistanceResult;

/** Optional parameters. */
export interface TilesetCreateOptionalParams
  extends coreClient.OperationOptions {
  /** User provided description of the tileset. */
  description?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type TilesetCreateResponse = TilesetCreateHeaders &
  LongRunningOperationResult;

/** Optional parameters. */
export interface TilesetListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TilesetListResponse = TilesetListResult;

/** Optional parameters. */
export interface TilesetGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TilesetGetResponse = Tileset;

/** Optional parameters. */
export interface TilesetDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface TilesetGetOperationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperation operation. */
export type TilesetGetOperationResponse = TilesetGetOperationHeaders &
  LongRunningOperationResult;

/** Optional parameters. */
export interface TilesetListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TilesetListNextResponse = TilesetListResult;

/** Optional parameters. */
export interface WfsGetLandingPageOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getLandingPage operation. */
export type WfsGetLandingPageResponse = LandingPageResult;

/** Optional parameters. */
export interface WfsListConformanceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listConformance operation. */
export type WfsListConformanceResponse = ConformanceResult;

/** Optional parameters. */
export interface WfsGetCollectionsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCollections operation. */
export type WfsGetCollectionsResponse = CollectionsResponse;

/** Optional parameters. */
export interface WfsGetCollectionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCollection operation. */
export type WfsGetCollectionResponse = Collection;

/** Optional parameters. */
export interface WfsGetCollectionDefinitionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCollectionDefinition operation. */
export type WfsGetCollectionDefinitionResponse = CollectionDefinition;

/** Optional parameters. */
export interface WfsGetFeaturesOptionalParams
  extends coreClient.OperationOptions {
  /**
   * The optional limit parameter limits the number of features that are presented in the response document.
   * Only features that are on the first level of the collection in the response document are counted. Nested objects contained within the explicitly requested features shall not be counted.
   * * Minimum = 1 * Maximum = 500 * Default = 10
   */
  limit?: number;
  /**
   * Only features that have a geometry that intersects the supplied bounding box are selected.
   * * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2
   * The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.
   * For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
   */
  boundingBox?: number[];
  /**
   * Filter expression to search for features with specific property values in a given collection. Only feature properties of scalar type and equals operator are supported.
   * This is a special parameter where the parameter name is a case sensitive property name. The scheme for this parameter is {property name}={property value}. Unless "filter" is one of the property names in the collection, "filter" should not be used as a parameter name. To search for features with "name" property value "21N13", use "name=21N13".
   * Multiple filters are supported and should be represented as multiple query parameters. E.g., <property1>=<value1>&<property2>=<value2> String values are case sensitive.
   */
  filter?: string;
}

/** Contains response data for the getFeatures operation. */
export type WfsGetFeaturesResponse = ExtendedGeoJsonFeatureCollection;

/** Optional parameters. */
export interface WfsGetFeatureOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getFeature operation. */
export type WfsGetFeatureResponse = FeatureResult;

/** Optional parameters. */
export interface WfsDeleteFeatureOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface GeneratedClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. */
  geography?: Geography;
  /** Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. */
  clientId?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}

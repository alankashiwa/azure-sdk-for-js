/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const Alias: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Alias",
    modelProperties: {
      createdTimestamp: {
        serializedName: "createdTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      aliasId: {
        serializedName: "aliasId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creatorDataItemId: {
        serializedName: "creatorDataItemId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const AliasListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AliasListResult",
    modelProperties: {
      aliases: {
        serializedName: "aliases",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Alias"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LongRunningOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LongRunningOperationResult",
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      },
      warning: {
        serializedName: "warning",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const MapDataListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MapDataListResult",
    modelProperties: {
      mapDataList: {
        serializedName: "mapDataList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MapData"
            }
          }
        }
      }
    }
  }
};

export const MapData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MapData",
    modelProperties: {
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locationURL: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sizeInBytes: {
        serializedName: "sizeInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      uploadStatus: {
        serializedName: "uploadStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Pending", "Completed", "Failed"]
        }
      },
      dataFormat: {
        serializedName: "dataFormat",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetListResult",
    modelProperties: {
      datasets: {
        serializedName: "datasets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dataset"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dataset: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dataset",
    modelProperties: {
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      datasetId: {
        serializedName: "datasetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasetSources: {
        serializedName: "datasetSources",
        type: {
          name: "Composite",
          className: "DatasetSources"
        }
      },
      featureCounts: {
        serializedName: "featureCounts",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const DatasetSources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetSources",
    modelProperties: {
      conversionIds: {
        serializedName: "conversionIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      appendDatasetId: {
        serializedName: "appendDatasetId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversionListResult",
    modelProperties: {
      conversions: {
        serializedName: "conversions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Conversion"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Conversion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Conversion",
    modelProperties: {
      conversionId: {
        serializedName: "conversionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "created",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      featureCounts: {
        serializedName: "featureCounts",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      }
    }
  }
};

export const StyleRules: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StyleRules",
    modelProperties: {
      styleRules: {
        serializedName: "styles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StyleRule"
            }
          }
        }
      }
    }
  }
};

export const StyleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StyleRule",
    uberParent: "StyleRule",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatesetCreatedResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatesetCreatedResult",
    modelProperties: {
      statesetId: {
        serializedName: "statesetId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatesetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatesetListResult",
    modelProperties: {
      statesets: {
        serializedName: "statesets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatesetInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Stateset: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Stateset",
    modelProperties: {
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasetIds: {
        serializedName: "datasetIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      styleRules: {
        serializedName: "statesetStyle",
        type: {
          name: "Composite",
          className: "StyleRules"
        }
      }
    }
  }
};

export const FeatureStatesStructure: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureStatesStructure",
    modelProperties: {
      states: {
        serializedName: "states",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FeatureState"
            }
          }
        }
      }
    }
  }
};

export const FeatureState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureState",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      eventTimestamp: {
        serializedName: "eventTimestamp",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Geofence: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Geofence",
    modelProperties: {
      geometries: {
        serializedName: "geometries",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeofenceGeometry"
            }
          }
        }
      },
      expiredGeofenceGeometryId: {
        serializedName: "expiredGeofenceGeometryId",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      invalidPeriodGeofenceGeometryId: {
        serializedName: "invalidPeriodGeofenceGeometryId",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isEventPublished: {
        serializedName: "isEventPublished",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const GeofenceGeometry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeofenceGeometry",
    modelProperties: {
      deviceId: {
        serializedName: "deviceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      udid: {
        serializedName: "udId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      geometryId: {
        serializedName: "geometryId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      distance: {
        serializedName: "distance",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nearestLat: {
        serializedName: "nearestLat",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nearestLon: {
        serializedName: "nearestLon",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nearestElevation: {
        serializedName: "nearestZ",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BufferRequestBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BufferRequestBody",
    modelProperties: {
      geometries: {
        serializedName: "geometries",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      distances: {
        serializedName: "distances",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const BufferResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BufferResult",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "BufferSummary"
        }
      },
      features: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "GeoJsonFeatureCollection"
        }
      }
    }
  }
};

export const BufferSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BufferSummary",
    modelProperties: {
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      information: {
        serializedName: "information",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonObject",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Point",
            "MultiPoint",
            "LineString",
            "MultiLineString",
            "Polygon",
            "MultiPolygon",
            "GeometryCollection",
            "Feature",
            "FeatureCollection"
          ]
        }
      }
    }
  }
};

export const GeoJsonFeatureCollectionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonFeatureCollectionData",
    modelProperties: {
      features: {
        serializedName: "features",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoJsonFeature"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonFeatureData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonFeatureData",
    modelProperties: {
      geometry: {
        serializedName: "geometry",
        type: {
          name: "Composite",
          className: "GeoJsonGeometry"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      featureType: {
        serializedName: "featureType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClosestPointResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClosestPointResponse",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "ClosestPointSummary"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClosestPoint"
            }
          }
        }
      }
    }
  }
};

export const ClosestPointSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClosestPointSummary",
    modelProperties: {
      sourcePoint: {
        serializedName: "sourcePoint",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      },
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      information: {
        serializedName: "information",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LatLongPairAbbreviated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LatLongPairAbbreviated",
    modelProperties: {
      lat: {
        serializedName: "lat",
        type: {
          name: "Number"
        }
      },
      lon: {
        serializedName: "lon",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ClosestPoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClosestPoint",
    modelProperties: {
      distanceInMeters: {
        serializedName: "distanceInMeters",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      position: {
        serializedName: "position",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      },
      geometryId: {
        serializedName: "geometryId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PointInPolygonResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointInPolygonResult",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "PointInPolygonSummary"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "PointInPolygonResultResult"
        }
      }
    }
  }
};

export const PointInPolygonSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointInPolygonSummary",
    modelProperties: {
      sourcePoint: {
        serializedName: "sourcePoint",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      },
      udid: {
        serializedName: "udid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      information: {
        serializedName: "information",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PointInPolygonResultResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PointInPolygonResultResult",
    modelProperties: {
      isPointInPolygons: {
        serializedName: "pointInPolygons",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      intersectingGeometries: {
        serializedName: "intersectingGeometries",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GreatCircleDistanceResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GreatCircleDistanceResult",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "GreatCircleDistanceSummary"
        }
      },
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "GreatCircleDistanceResultResult"
        }
      }
    }
  }
};

export const GreatCircleDistanceSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GreatCircleDistanceSummary",
    modelProperties: {
      sourcePoint: {
        serializedName: "sourcePoint",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      },
      targetPoint: {
        serializedName: "targetPoint",
        type: {
          name: "Composite",
          className: "LatLongPairAbbreviated"
        }
      }
    }
  }
};

export const GreatCircleDistanceResultResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GreatCircleDistanceResultResult",
    modelProperties: {
      distanceInMeters: {
        serializedName: "distanceInMeters",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TilesetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TilesetListResult",
    modelProperties: {
      tilesets: {
        serializedName: "tilesets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Tileset"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Tileset: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Tileset",
    modelProperties: {
      tilesetId: {
        serializedName: "tilesetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasetId: {
        serializedName: "datasetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      minZoom: {
        serializedName: "minZoom",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxZoom: {
        serializedName: "maxZoom",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bbox: {
        serializedName: "bbox",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const LandingPageResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LandingPageResult",
    modelProperties: {
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "links",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WFSEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const WFSEndpointLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WFSEndpointLink",
    modelProperties: {
      href: {
        serializedName: "href",
        required: true,
        type: {
          name: "String"
        }
      },
      rel: {
        serializedName: "rel",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      hrefLang: {
        serializedName: "hreflang",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConformanceResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConformanceResult",
    modelProperties: {
      conformsTo: {
        serializedName: "conformsTo",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CollectionsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CollectionsResponse",
    modelProperties: {
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "links",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WFSEndpointLink"
            }
          }
        }
      },
      collections: {
        serializedName: "collections",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Collection"
            }
          }
        }
      }
    }
  }
};

export const Collection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Collection",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "links",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WFSEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const CollectionDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CollectionDefinition",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      idPrefix: {
        serializedName: "idPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      geometryType: {
        serializedName: "geometryType",
        required: true,
        type: {
          name: "String"
        }
      },
      featureTypes: {
        serializedName: "featureTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DefinitionProperty"
            }
          }
        }
      },
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WFSEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const DefinitionProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DefinitionProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      required: {
        serializedName: "required",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ExtendedGeoJsonFeatureCollectionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedGeoJsonFeatureCollectionData",
    modelProperties: {
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberReturned: {
        serializedName: "numberReturned",
        type: {
          name: "Number"
        }
      },
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WFSEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const FeatureResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureResult",
    modelProperties: {
      ontology: {
        serializedName: "ontology",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      feature: {
        serializedName: "feature",
        type: {
          name: "Composite",
          className: "GeoJsonFeature"
        }
      },
      links: {
        serializedName: "links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WFSEndpointLink"
            }
          }
        }
      }
    }
  }
};

export const NumberRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NumberRule",
    modelProperties: {
      range: {
        serializedName: "range",
        type: {
          name: "Composite",
          className: "Range"
        }
      },
      color: {
        serializedName: "color",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Range: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Range",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        type: {
          name: "String"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "String"
        }
      },
      exclusiveMinimum: {
        serializedName: "exclusiveMinimum",
        type: {
          name: "String"
        }
      },
      exclusiveMaximum: {
        serializedName: "exclusiveMaximum",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BooleanRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BooleanRule",
    modelProperties: {
      true: {
        serializedName: "true",
        type: {
          name: "String"
        }
      },
      false: {
        serializedName: "false",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonPointData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonPointData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiPointData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiPointData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Number"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonLineStringData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonLineStringData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Number"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiLineStringData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiLineStringData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonPolygonData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonPolygonData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiPolygonData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiPolygonData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Sequence",
                      element: {
                        type: {
                          name: "Number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonGeometryCollectionData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonGeometryCollectionData",
    modelProperties: {
      geometries: {
        serializedName: "geometries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoJsonGeometry"
            }
          }
        }
      }
    }
  }
};

export const BooleanStyleRule: coreClient.CompositeMapper = {
  serializedName: "boolean",
  type: {
    name: "Composite",
    className: "BooleanStyleRule",
    uberParent: "StyleRule",
    polymorphicDiscriminator: StyleRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...StyleRule.type.modelProperties,
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BooleanRule"
            }
          }
        }
      }
    }
  }
};

export const NumberStyleRule: coreClient.CompositeMapper = {
  serializedName: "number",
  type: {
    name: "Composite",
    className: "NumberStyleRule",
    uberParent: "StyleRule",
    polymorphicDiscriminator: StyleRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...StyleRule.type.modelProperties,
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NumberRule"
            }
          }
        }
      }
    }
  }
};

export const StringStyleRule: coreClient.CompositeMapper = {
  serializedName: "string",
  type: {
    name: "Composite",
    className: "StringStyleRule",
    uberParent: "StyleRule",
    polymorphicDiscriminator: StyleRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...StyleRule.type.modelProperties,
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }
        }
      }
    }
  }
};

export const StatesetInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatesetInfo",
    modelProperties: {
      ...Stateset.type.modelProperties,
      statesetId: {
        serializedName: "statesetId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonGeometry: coreClient.CompositeMapper = {
  serializedName: "GeoJsonGeometry",
  type: {
    name: "Composite",
    className: "GeoJsonGeometry",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      ...GeoJsonObject.type.modelProperties
    }
  }
};

export const GeoJsonFeature: coreClient.CompositeMapper = {
  serializedName: "Feature",
  type: {
    name: "Composite",
    className: "GeoJsonFeature",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: GeoJsonObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonObject.type.modelProperties,
      ...GeoJsonFeatureData.type.modelProperties
    }
  }
};

export const GeoJsonFeatureCollection: coreClient.CompositeMapper = {
  serializedName: "FeatureCollection",
  type: {
    name: "Composite",
    className: "GeoJsonFeatureCollection",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: GeoJsonObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonObject.type.modelProperties,
      ...GeoJsonFeatureCollectionData.type.modelProperties
    }
  }
};

export const ExtendedGeoJsonFeatureCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedGeoJsonFeatureCollection",
    modelProperties: {
      ...GeoJsonFeatureCollectionData.type.modelProperties,
      ...ExtendedGeoJsonFeatureCollectionData.type.modelProperties,
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "Point",
            "MultiPoint",
            "LineString",
            "MultiLineString",
            "Polygon",
            "MultiPolygon",
            "GeometryCollection",
            "Feature",
            "FeatureCollection"
          ]
        }
      }
    }
  }
};

export const GeoJsonPoint: coreClient.CompositeMapper = {
  serializedName: "Point",
  type: {
    name: "Composite",
    className: "GeoJsonPoint",
    uberParent: "GeoJsonPointData",
    polymorphicDiscriminator: GeoJsonPointData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonPointData.type.modelProperties
    }
  }
};

export const GeoJsonMultiPoint: coreClient.CompositeMapper = {
  serializedName: "MultiPoint",
  type: {
    name: "Composite",
    className: "GeoJsonMultiPoint",
    uberParent: "GeoJsonMultiPointData",
    polymorphicDiscriminator:
      GeoJsonMultiPointData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiPointData.type.modelProperties
    }
  }
};

export const GeoJsonLineString: coreClient.CompositeMapper = {
  serializedName: "LineString",
  type: {
    name: "Composite",
    className: "GeoJsonLineString",
    uberParent: "GeoJsonLineStringData",
    polymorphicDiscriminator:
      GeoJsonLineStringData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonLineStringData.type.modelProperties
    }
  }
};

export const GeoJsonMultiLineString: coreClient.CompositeMapper = {
  serializedName: "MultiLineString",
  type: {
    name: "Composite",
    className: "GeoJsonMultiLineString",
    uberParent: "GeoJsonMultiLineStringData",
    polymorphicDiscriminator:
      GeoJsonMultiLineStringData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiLineStringData.type.modelProperties
    }
  }
};

export const GeoJsonPolygon: coreClient.CompositeMapper = {
  serializedName: "Polygon",
  type: {
    name: "Composite",
    className: "GeoJsonPolygon",
    uberParent: "GeoJsonPolygonData",
    polymorphicDiscriminator: GeoJsonPolygonData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonPolygonData.type.modelProperties
    }
  }
};

export const GeoJsonMultiPolygon: coreClient.CompositeMapper = {
  serializedName: "MultiPolygon",
  type: {
    name: "Composite",
    className: "GeoJsonMultiPolygon",
    uberParent: "GeoJsonMultiPolygonData",
    polymorphicDiscriminator:
      GeoJsonMultiPolygonData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiPolygonData.type.modelProperties
    }
  }
};

export const GeoJsonGeometryCollection: coreClient.CompositeMapper = {
  serializedName: "GeometryCollection",
  type: {
    name: "Composite",
    className: "GeoJsonGeometryCollection",
    uberParent: "GeoJsonGeometryCollectionData",
    polymorphicDiscriminator:
      GeoJsonGeometryCollectionData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonGeometryCollectionData.type.modelProperties
    }
  }
};

export const AliasCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AliasCreateHeaders",
    modelProperties: {
      accessControlExposeHeaders: {
        serializedName: "access-control-expose-headers",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataUploadHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataUploadHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataUpdateHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataDownloadHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataDownloadHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataGetOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataGetOperationHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetCreateHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasetGetOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasetGetOperationHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversionConvertHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversionConvertHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConversionGetOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConversionGetOperationHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialGetGeofenceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialGetGeofenceHeaders",
    modelProperties: {
      xCorrelationId: {
        serializedName: "x-correlation-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpatialPostGeofenceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpatialPostGeofenceHeaders",
    modelProperties: {
      xCorrelationId: {
        serializedName: "x-correlation-id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TilesetCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TilesetCreateHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TilesetGetOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TilesetGetOperationHeaders",
    modelProperties: {
      resourceLocation: {
        serializedName: "resource-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  StyleRule: StyleRule,
  GeoJsonObject: GeoJsonObject,
  "StyleRule.boolean": BooleanStyleRule,
  "StyleRule.number": NumberStyleRule,
  "StyleRule.string": StringStyleRule,
  "GeoJsonObject.GeoJsonGeometry": GeoJsonGeometry,
  "GeoJsonObject.Feature": GeoJsonFeature,
  "GeoJsonObject.FeatureCollection": GeoJsonFeatureCollection,
  "GeoJsonPointData.Point": GeoJsonPoint,
  "GeoJsonMultiPointData.MultiPoint": GeoJsonMultiPoint,
  "GeoJsonLineStringData.LineString": GeoJsonLineString,
  "GeoJsonMultiLineStringData.MultiLineString": GeoJsonMultiLineString,
  "GeoJsonPolygonData.Polygon": GeoJsonPolygon,
  "GeoJsonMultiPolygonData.MultiPolygon": GeoJsonMultiPolygon,
  "GeoJsonGeometryCollectionData.GeometryCollection": GeoJsonGeometryCollection
};
